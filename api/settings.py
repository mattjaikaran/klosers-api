"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
import os

import dj_database_url
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


ENVIRONMENT = os.environ.get("ENVIRONMENT", "development")
print(f" >>> klosers-api/settings.py > #ENVIRONMENT: {ENVIRONMENT} <<<")
IN_DEV = ENVIRONMENT == "development"
IN_STAGING = ENVIRONMENT == "staging"
IN_PROD = ENVIRONMENT == "production"


def _env_get_required(setting_name):
    """Get the value of an environment variable and assert that it is set."""
    setting = os.environ.get(setting_name, "")
    if not IN_DEV:
        assert setting not in {
            None,
            "",
        }, "{0} must be defined as an environment variable.".format(setting_name)
    return setting


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG")

if IN_DEV:
    SERVER_EMAIL = "Klosers Development <support-dev@klosers.io>"
elif IN_STAGING:
    SERVER_EMAIL = "Klosers Staging <support-staging@klosers.io>"
else:
    SERVER_EMAIL = "Klosers <support@klosers.io>"

DEFAULT_FROM_EMAIL = SERVER_EMAIL
KLOSERS_ADMIN_EMAIL = os.environ.get("SUPPORT_EMAIL")
KLOSERS_SUPPORT_EMAIL = os.environ.get("SUPPORT_EMAIL")

# Email address of the staff who should receive certain emails
STAFF_EMAIL = os.environ.get("STAFF_EMAIL", "support@joinklosers.com")


CURRENT_DOMAIN = os.environ.get("CURRENT_DOMAIN")
CURRENT_PORT = os.environ.get("CURRENT_PORT")
HEROKU_APP_NAME = os.environ.get("HEROKU_APP_NAME")
HEROKU_BRANCH = os.environ.get("HEROKU_BRANCH")
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")
# ALLOWED_HOSTS = [
#     "http://localhost:3000",
#     "https://klosers.io",
#     "https://www.klosers.io",
#     "https://klosers.vercel.app",
#     "https://klosers.up.railway.app",
# ]
ALLOWED_HOSTS = ["*"]
ALLOWED_HOSTS += _env_get_required("ALLOWED_HOSTS").split(",")
if CURRENT_DOMAIN not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append(CURRENT_DOMAIN)

# Application definition

INSTALLED_APPS = [
    # Django apps
    "unfold",  # for new admin panel. must be above django.contrib.admin
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "whitenoise.runserver_nostatic",
    # Third-party apps
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    # "django.contrib.sites",
    "import_export",
    "django_filters",
    # "debug_toolbar",
    # Internal apps
    "common",
    "core",
    "sales",
    # "properties",
    # "notifications",
    # "messaging",
]

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:3000",
    "http://localhost:3000",
    "https://klosers.vercel.app",
    "https://klosers.io",
    "https://www.klosers.io",
    "https://*.up.railway.app",
    "https://klosers.up.railway.app",
    # "https://stripe.com",
    # "https://*.s3.amazonaws.com",
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "https://klosers.vercel.app",
    "https://klosers.io",
    "https://www.klosers.io",
    "https://*.up.railway.app",
    "https://klosers.up.railway.app",
    # "https://*.stripe.com",
    # "https://*.s3.amazonaws.com",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ASGI_APPLICATION = "api.asgi.application"
WSGI_APPLICATION = "api.wsgi.application"

#
# Django Rest Framework Configuration
#
REST_FRAMEWORK = {
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.AcceptHeaderVersioning",
    "DEFAULT_PAGINATION_CLASS": "core.pagination.PageNumberPagination",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated"),
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
    ],
    "ALLOWED_VERSIONS": [
        "1.0",
    ],
    "DEFAULT_VERSION": "1.0",
    "PAGE_SIZE": 10,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "JTI_CLAIM": "jti",
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    # this is the default serializer
    # "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    # this is the custom serializer
    "TOKEN_OBTAIN_SERIALIZER": "core.serializers.UserLoginSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(days=1),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    "UPDATE_LAST_LOGIN": True,
}

REST_USE_JWT = True  # to use JSON web tokens

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

default_db = dj_database_url.config()
print(f"default_db => {default_db}")

if bool(default_db):
    DATABASES = {"default": default_db}
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": _env_get_required("DB_NAME"),
            "USER": _env_get_required("DB_USER"),
            "PASSWORD": os.environ.get("DB_PASS", ""),
            "HOST": _env_get_required("DB_HOST"),
            "CONN_MAX_AGE": os.environ.get("DB_CONN_MAX_AGE", 820),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "core.CustomUser"


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

WHITENOISE_USE_FINDERS = True
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_ALLOW_ALL_ORIGINS = True
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

CURRENT_DOMAIN = os.environ.get("CURRENT_DOMAIN")
CURRENT_PORT = os.environ.get("CURRENT_PORT")

#
# Email settings
#

# if false, emails will be printed to the console
USE_CUSTOM_SMTP = os.environ.get("USE_CUSTOM_SMTP")

if USE_CUSTOM_SMTP == "True":
    EMAIL_HOST = _env_get_required("SMTP_HOST")
    EMAIL_PORT = os.environ.get("SMTP_PORT", 587)
    EMAIL_HOST_USER = _env_get_required("SMTP_USER")
    EMAIL_HOST_PASSWORD = _env_get_required("SMTP_PASSWORD")
    EMAIL_ALLOWED_DOMAINS = _env_get_required("SMTP_VALID_TESTING_DOMAINS")
    EMAIL_USE_TLS = True
    MAILGUN_WEBHOOK_SIGNING_KEY = _env_get_required("MAILGUN_WEBHOOK_SIGNING_KEY")
else:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# for Django Sesame token generates in the console instead of email
# remove in prod and use mailgun or sendgrid

LOGIN_REDIRECT_URL = "/admin/"
SESAME_TOKEN_NAME = "token"
SESAME_MAX_AGE = timedelta(days=1)
SESAME_ONE_TIME = True  # token can only be used once
SESAME_LOGIN_MESSAGE = "You have been logged in."

# ADMIN
# ------------------------------------------------------------------------------
# Django Admin URL.
ADMIN_URL = "admin/"
# https://docs.djangoproject.com/en/dev/ref/settings/#admins
ADMINS = [("""Klosers""", "mattjaikaran@gmail.com")]
# https://docs.djangoproject.com/en/dev/ref/settings/#managers
MANAGERS = ADMINS

# Django Storages - S3 config
USE_AWS_STORAGE = os.environ.get("USE_AWS_STORAGE") == "True"
PRIVATE_MEDIAFILES_LOCATION = ""
AWS_ACCESS_KEY_ID = ""
AWS_SECRET_ACCESS_KEY = ""
AWS_STORAGE_BUCKET_NAME = ""
AWS_S3_CUSTOM_DOMAIN = ""
AWS_S3_REGION_NAME = ""
AWS_DEFAULT_ACL = None

STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, "static/"),
]

if USE_AWS_STORAGE and not IN_DEV:
    AWS_ACCESS_KEY_ID = _env_get_required("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = _env_get_required("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = _env_get_required("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_LOCATION = _env_get_required("AWS_LOCATION")
    AWS_S3_REGION_NAME = _env_get_required("AWS_S3_REGION_NAME")
    AWS_DEFAULT_ACL = None
    AWS_S3_SIGNATURE_VERSION = "s3v4"
    AWS_S3_URL_PROTOCOL = "https"
    AWS_S3_USE_SSL = True
    AWS_S3_VERIFY = True

    STATIC_ROOT = os.path.join(BASE_DIR, "")
    # STATICFILES_STORAGE = "storages.backends.s3.S3Storage"
    # STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    PUBLIC_MEDIAFILES_LOCATION = AWS_LOCATION + "/media"  # public

    # Default file storage is private
    # PRIVATE_MEDIAFILES_LOCATION = AWS_LOCATION + "/media"
    # DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    # PRIVATE_FILE_STORAGE = "core.handlers.PrivateMediaStorage"

    # STATIC_URL = f"{AWS_S3_URL_PROTOCOL}://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"
    # MEDIA_URL = f"{AWS_S3_URL_PROTOCOL}://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/media/"
    STATIC_URL = "/static/"
    MEDIA_URL = "/media-files/"
    print(f"STATIC_URL => {STATIC_URL}")
    print(f"MEDIA_URL => {MEDIA_URL}")
elif USE_AWS_STORAGE and IN_DEV:
    STATIC_URL = "/static/"
    STATIC_ROOT = os.path.join(BASE_DIR, "static/")
    # STATICFILES_STORAGE = "storages.backends.s3.S3Storage"
    DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"

else:
    STATIC_URL = "/static/"
    STATIC_ROOT = os.path.join(BASE_DIR, "static/")
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
    DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"

MEDIA_URL = "/media-files/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media-files")

# Maximum size, in bytes, of a request before it will be streamed to the
# file system instead of into memory.
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB

# Maximum size in bytes of request data (excluding file uploads) that will be
# read before a SuspiciousOperation (RequestDataTooBig) is raised.
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600  # i.e. 100 MB


#
# HTTPS Everywhere outside the dev environment
#
if not IN_DEV:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    MIDDLEWARE += ["django.middleware.security.SecurityMiddleware"]
